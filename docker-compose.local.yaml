configs:
  grafana-dashboards:
    file: ./dockergrafana/provisioning/dashboards/logs-dashboard.json
  grafana-dashboard-config:
    file: ./dockergrafana/provisioning/dashboards/dashboard.yml
  grafana-datasources:
    file: ./dockergrafana/provisioning/datasources/datasource.yml
  promtail-config:
    file: ./dockergrafana/provisioning/promtail/config.yml

name: h3xrecon

services:
  # loki:
  #   image: grafana/loki:latest
  #   ports:
  #     - target: 3100
  #       published: 3100
  #   command: -config.file=/etc/loki/local-config.yaml
  #   deploy:
  #     placement:
  #       constraints:
  #         - node.labels.H3XRECON_SWARM_ROLE == processor

  # promtail:
  #   image: grafana/promtail:latest
  #   volumes:
  #     - /var/lib/docker/containers:/var/lib/docker/containers:ro
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   configs:
  #     - source: promtail-config
  #       target: /etc/promtail/config.yml
  #   command: -config.file=/etc/promtail/config.yml
  
  # grafana:
  #   image: grafana/grafana:latest
  #   ports:
  #     - target: 3000
  #       published: 3000
  #   environment:
  #     - GF_AUTH_ANONYMOUS_ENABLED=true
  #     - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
  #     - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
  #   configs:
  #     - source: grafana-dashboards
  #       target: /etc/grafana/provisioning/dashboards/logs-dashboard.json
  #     - source: grafana-dashboard-config
  #       target: /etc/grafana/provisioning/dashboards/dashboard.yml
  #     - source: grafana-datasources
  #       target: /etc/grafana/provisioning/datasources/datasource.yml

  cache:
    image: redis:6.2-alpine
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --protected-mode no
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    ports:
      - "6379:6379"

  database:
    image: ${H3XRECON_DOCKER_REGISTRY}/h3xrecon_pgsql:latest
    env_file:
      - .env.compose
    environment:
      - POSTGRES_PASSWORD=${H3XRECON_DB_PASS}
      - POSTGRES_USER=${H3XRECON_DB_USER}
      - POSTGRES_DB=${H3XRECON_DB_NAME}
    volumes:
      - pgsql_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${H3XRECON_DB_USER} -d ${H3XRECON_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      bash -c "
        docker-entrypoint.sh postgres &
        until pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}; do sleep 1; done;
        /migrate.sh &&
        wait
      "

  msgbroker:
    image: ${H3XRECON_DOCKER_REGISTRY}/h3xrecon_msgbroker:latest
    env_file:
      - .env.compose
    volumes:
      - nats_data:/data
    ports:
      - "4222:4222"
    healthcheck:
      test: ["CMD-SHELL", "nats stream ls --server=nats://localhost:4222 | grep -q 'FUNCTION_EXECUTE' && nats stream ls --server=nats://localhost:4222 | grep -q 'FUNCTION_OUTPUT' && nats stream ls --server=nats://localhost:4222 | grep -q 'RECON_DATA'"]
      interval: 2s
      timeout: 2s
      retries: 5
      start_period: 5s

  jobprocessor:
    image: ${H3XRECON_DOCKER_REGISTRY}/h3xrecon_server:latest
    env_file:
      - .env.compose
    environment:
      - H3XRECON_ROLE=jobprocessor
    depends_on:
      msgbroker:
        condition: service_healthy
      cache:
        condition: service_healthy

  dataprocessor:
    image: ${H3XRECON_DOCKER_REGISTRY}/h3xrecon_server:latest
    env_file:
      - .env.compose
    environment:
      - H3XRECON_ROLE=dataprocessor
    depends_on:
      msgbroker:
        condition: service_healthy
      cache:
        condition: service_healthy

  worker:
    image: ${H3XRECON_DOCKER_REGISTRY}/h3xrecon_worker:latest
    env_file:
      - .env.compose
    depends_on:
      msgbroker:
        condition: service_healthy
      cache:
        condition: service_healthy
    deploy:
      replicas: ${H3XRECON_WORKERS_COUNT}

volumes:
  pgsql_data:
  redis_data:
  nats_data:
