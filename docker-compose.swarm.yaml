configs:
  grafana-dashboards:
    file: ./grafana/provisioning/dashboards/logs-dashboard.json
  grafana-dashboard-config:
    file: ./grafana/provisioning/dashboards/dashboard.yml
  grafana-datasources:
    file: ./grafana/provisioning/datasources/datasource.yml
  promtail-config:
    file: ./grafana/provisioning/promtail/config.yml

services:
  loki:
    image: grafana/loki:latest
    ports:
      - target: 3100
        published: 3100
    command: -config.file=/etc/loki/local-config.yaml
    deploy:
      placement:
        constraints:
          - node.labels.H3XRECON_SWARM_ROLE == processor

  promtail:
    image: grafana/promtail:latest
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    configs:
      - source: promtail-config
        target: /etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    deploy:
      mode: global
      

  grafana:
    image: grafana/grafana:latest
    ports:
      - target: 3000
        published: 3000
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
    configs:
      - source: grafana-dashboards
        target: /etc/grafana/provisioning/dashboards/logs-dashboard.json
      - source: grafana-dashboard-config
        target: /etc/grafana/provisioning/dashboards/dashboard.yml
      - source: grafana-datasources
        target: /etc/grafana/provisioning/datasources/datasource.yml
    deploy:
      placement:
        constraints:
          - node.labels.H3XRECON_SWARM_ROLE == processor

  cache:
    image: redis:6.2-alpine
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --protected-mode no
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    ports:
      - target: 6379
        published: 6379
    deploy:
      placement:
        constraints:
          - node.labels.H3XRECON_SWARM_ROLE == processor
  
  database:
    environment:
      - H3XRECON_DB_USER
      - H3XRECON_DB_NAME
      - H3XRECON_DB_HOST
      - H3XRECON_DB_PASS
      - POSTGRES_PASSWORD=${H3XRECON_DB_PASS}
      - POSTGRES_USER=h3xrecon
      - POSTGRES_DB=h3xrecon
    image: postgres
    volumes:
      - pgsql_data:/var/lib/postgresql/data
    ports:
      - target: 5432
        published: 5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U h3xrecon -d h3xrecon"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      bash -c "
        docker-entrypoint.sh postgres &
        until pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}; do sleep 1; done;
        /migrate.sh &&
        wait
      "
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.H3XRECON_SWARM_ROLE == processor

  msgbroker:
    image: ghcr.io/h3xitsec/h3xrecon_msgbroker:latest
    volumes:
      - nats_data:/data
    ports:
      - target: 4222
        published: 4222
    healthcheck:
      test: nats stream ls --server=nats://localhost:4222 | grep -q "FUNCTION_EXECUTE" && nats stream ls --server=nats://localhost:4222 | grep -q "FUNCTION_OUTPUT" && nats stream ls --server=nats://localhost:4222 | grep -q "RECON_DATA"
      interval: 2s
      timeout: 2s
      retries: 5
      start_period: 5s
    deploy:
      placement:
        constraints:
          - node.labels.H3XRECON_SWARM_ROLE == processor
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}"
  
  jobprocessor:
    image: ghcr.io/h3xitsec/h3xrecon:latest
    depends_on:
      - msgbroker:service_healthy
      - cache:service_healthy
      - database:service_healthy
    environment:
      - H3XRECON_DB_USER
      - H3XRECON_DB_NAME
      - H3XRECON_DB_HOST
      - H3XRECON_DB_PASS
      - H3XRECON_REDIS_HOST
      - H3XRECON_REDIS_PORT
      - H3XRECON_NATS_HOST
      - H3XRECON_NATS_PORT
      - H3XRECON_LOG_LEVEL
      - H3XRECON_LOG_FILE_PATH
      - H3XRECON_ROLE=jobprocessor
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.H3XRECON_SWARM_ROLE == processor
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}"
  
  dataprocessor:
    image: ghcr.io/h3xitsec/h3xrecon:latest
    depends_on:
      - msgbroker:service_healthy
      - cache:service_healthy
      - database:service_healthy
    environment:
      - H3XRECON_DB_USER
      - H3XRECON_DB_NAME
      - H3XRECON_DB_HOST
      - H3XRECON_DB_PASS
      - H3XRECON_REDIS_HOST
      - H3XRECON_REDIS_PORT
      - H3XRECON_NATS_HOST
      - H3XRECON_NATS_PORT
      - H3XRECON_LOG_LEVEL
      - H3XRECON_LOG_FILE_PATH
      - H3XRECON_ROLE=dataprocessor
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.H3XRECON_SWARM_ROLE == processor
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}"
  
  worker:
    image: ghcr.io/h3xitsec/h3xrecon:latest
    depends_on:
      - msgbroker:service_healthy
      - cache:service_healthy
      - database:service_healthy
    environment:
      - H3XRECON_DB_USER
      - H3XRECON_DB_NAME
      - H3XRECON_DB_HOST
      - H3XRECON_DB_PASS
      - H3XRECON_REDIS_HOST
      - H3XRECON_REDIS_PORT
      - H3XRECON_NATS_HOST
      - H3XRECON_NATS_PORT
      - H3XRECON_LOG_LEVEL
      - H3XRECON_LOG_FILE_PATH
      - H3XRECON_ROLE=worker
    deploy:
      mode: replicated
      replicas: ${H3XRECON_WORKERS_COUNT}
      placement:
        constraints:
          - node.labels.H3XRECON_SWARM_ROLE == worker
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}"

volumes:
  pgsql_data: {}
  redis_data: {}
  nats_data: {}
  tailscale_state: {}