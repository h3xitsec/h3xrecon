configs:
  grafana-dashboards:
    file: ./docker/grafana/provisioning/dashboards/logs-dashboard.json
  grafana-dashboards-data:
    file: ./docker/grafana/provisioning/dashboards/data-dashboard.json
  grafana-dashboards-nuclei:
    file: ./docker/grafana/provisioning/dashboards/nuclei-dashboard.json
  grafana-dashboards-urls:
    file: ./docker/grafana/provisioning/dashboards/urls-dashboard.json
  grafana-dashboard-config:
    file: ./docker/grafana/provisioning/dashboards/dashboard.yml
  grafana-datasources:
    file: ./docker/grafana/provisioning/datasources/datasource.yml
  promtail-config:
    file: ./docker/grafana/provisioning/promtail/config.yml
  msgbroker-init:
    file: ./docker/msgbroker/init.sh
  msgbroker-entrypoint:
    file: ./docker/msgbroker/entrypoint.sh
name: h3xrecon

services:
  loki:
    image: grafana/loki:latest
    ports:
      - target: 3100
        published: 3100
    command: -config.file=/etc/loki/local-config.yaml
    deploy:
      placement:
        constraints:
          - node.labels.H3XRECON_SWARM_ROLE == processor

  promtail:
    image: grafana/promtail:latest
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    configs:
      - source: promtail-config
        target: /etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml

  grafana:
    image: grafana/grafana:latest
    ports:
      - target: 3000
        published: 3000
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_INSTALL_PLUGINS=yesoreyeram-infinity-datasource,redis-datasource
    volumes:
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    # configs:
    #   - source: grafana-dashboards
    #     target: /etc/grafana/provisioning/dashboards/logs-dashboard.json
    #   - source: grafana-dashboard-config
    #     target: /etc/grafana/provisioning/dashboards/dashboard.yml
    #   - source: grafana-datasources
    #     target: /etc/grafana/provisioning/datasources/datasource.yml
    #   - source: grafana-dashboards-data
    #     target: /etc/grafana/provisioning/dashboards/data-dashboard.json
    #   - source: grafana-dashboards-nuclei
    #     target: /etc/grafana/provisioning/dashboards/nuclei-dashboard.json
    #   - source: grafana-dashboards-urls
    #     target: /etc/grafana/provisioning/dashboards/urls-dashboard.json
  
  cache:
    image: redis:latest
    volumes:
      - redis_data:/data
    command: >
      sh -c '
      echo "Starting with clean slate..." &&
      find /data -type f -delete &&
      redis-server --daemonize yes --requirepass ${H3XRECON_REDIS_PASS} &&
      sleep 2 &&
      redis-cli -a ${H3XRECON_REDIS_PASS} -n 1 FLUSHDB &&
      redis-cli -a ${H3XRECON_REDIS_PASS} SAVE &&
      redis-cli -a ${H3XRECON_REDIS_PASS} shutdown &&
      exec redis-server 
      --appendonly yes 
      --protected-mode yes
      --requirepass ${H3XRECON_REDIS_PASS}'
    healthcheck:
      test: |
        redis-cli -a ${H3XRECON_REDIS_PASS} set health_check_key health_check_value &&
        redis-cli -a ${H3XRECON_REDIS_PASS} get health_check_key | grep -q health_check_value &&
        redis-cli -a ${H3XRECON_REDIS_PASS} del health_check_key
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    ports:
      - "6379:6379"

  database:
    image: ghcr.io/h3xitsec/h3xrecon/database:${H3XRECON_IMAGE_VERSION}
    env_file:
      - .env.compose
    environment:
      - POSTGRES_PASSWORD=${H3XRECON_DB_PASS}
      - POSTGRES_USER=${H3XRECON_DB_USER}
      - POSTGRES_DB=${H3XRECON_DB_NAME}
      - POSTGRES_HOST_AUTH_METHOD=md5
    volumes:
      - pgsql_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${H3XRECON_DB_USER} -d ${H3XRECON_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      bash -c "
        docker-entrypoint.sh postgres -c 'max_connections=200' &
        until pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}; do sleep 1; done;
        /migrate.sh &&
        wait
      "
  
  pgbouncer:
    image: bitnami/pgbouncer:latest
    env_file:
      - .env.compose
    environment:
      - PGBOUNCER_DATABASE=h3xrecon
      - POSTGRESQL_HOST=database
      - POSTGRESQL_PORT=5432
      - POSTGRESQL_DATABASE=h3xrecon
      - POSTGRESQL_USERNAME=h3xrecon
      - POSTGRESQL_PASSWORD=h3xrecon
      - PGBOUNCER_AUTH_TYPE=md5
    volumes:
      - ./docker/pgbouncer/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini:ro
      - ./docker/pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt:ro
    ports:
      - "6432:6432"
    depends_on:
      database:
        condition: service_healthy
    restart: unless-stopped

  msgbroker:
    image: nats:2.10.24-alpine
    #image: ghcr.io/h3xitsec/h3xrecon/msgbroker:${H3XRECON_IMAGE_VERSION}
    env_file:
      - .env.compose
    volumes:
      - nats_data:/data
    ports:
      - "4222:4222"
      - "8222:8222"
    command: "--http_port 8222 -DVV"
    entrypoint:
      - /bin/sh
      - /entrypoint.sh
    configs:
      - source: msgbroker-init
        target: /init.sh
      - source: msgbroker-entrypoint
        target: /entrypoint.sh
    healthcheck:
      test: ["CMD-SHELL", "nats stream ls --server=nats://localhost:4222 | grep -q 'FUNCTION_EXECUTE' && nats stream ls --server=nats://localhost:4222 | grep -q 'FUNCTION_OUTPUT' && nats stream ls --server=nats://localhost:4222 | grep -q 'RECON_DATA'"]
      interval: 2s
      timeout: 2s
      retries: 5
      start_period: 5s

  parsing:
    image: ghcr.io/h3xitsec/h3xrecon/server:${H3XRECON_IMAGE_VERSION}
    env_file:
      - .env.compose
    environment:
      - H3XRECON_LOG_LEVEL
      - H3XRECON_ROLE=parsing
    volumes:
      - ../screenshots:/app/screenshots
    depends_on:
      msgbroker:
        condition: service_healthy
      cache:
        condition: service_healthy
      database:
        condition: service_healthy

  data:
    image: ghcr.io/h3xitsec/h3xrecon/server:${H3XRECON_IMAGE_VERSION}
    env_file:
      - .env.compose
    environment:
      - H3XRECON_LOG_LEVEL
      - H3XRECON_ROLE=data
    volumes:
      - ../screenshots:/app/screenshots
    depends_on:
      msgbroker:
        condition: service_healthy
      cache:
        condition: service_healthy
      database:
        condition: service_healthy

  recon:
    image: ghcr.io/h3xitsec/h3xrecon/worker:${H3XRECON_IMAGE_VERSION}
    env_file:
      - .env.compose
    environment:
      - H3XRECON_LOG_LEVEL
      - H3XRECON_ROLE=recon
    volumes:
      - ../screenshots:/app/screenshots
    depends_on:
      msgbroker:
        condition: service_healthy
      cache:
        condition: service_healthy
      database:
        condition: service_healthy
    deploy:
      replicas: ${H3XRECON_WORKERS_COUNT}

volumes:
  pgsql_data:
  redis_data:
  nats_data:
