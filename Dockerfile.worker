## Builder stage
FROM golang:1.23-bullseye AS builder

WORKDIR /app

RUN apt-get update && apt-get install -y \
    git \
    make \
    gcc \
    wget \
    build-essential \
    python3 \
    python3-pip \
    && rm -rf /var/lib/apt/lists/*

ENV CGO_ENABLED=1
ENV GOBIN=/usr/local/go/bin

# Install pdtm and tools with specific architecture handling
RUN ARCH=$(dpkg --print-architecture) && \
    if [ "$ARCH" = "arm64" ]; then \
        export GOARCH=arm64 && \
        export CC=aarch64-linux-gnu-gcc; \
    fi && \
    which go && \
    /usr/local/go/bin/go install -v github.com/projectdiscovery/pdtm/cmd/pdtm@latest && \
    pdtm -i subfinder && \
    pdtm -i httpx && \
    pdtm -i dnsx && \
    pdtm -i nuclei

RUN /usr/local/go/bin/go install github.com/Josue87/gotator@latest

RUN /usr/local/go/bin/go install -v github.com/owasp-amass/amass/v4/...@master

RUN /usr/local/go/bin/go install -v github.com/sensepost/gowitness@latest

RUN /usr/local/go/bin/go install github.com/ffuf/ffuf/v2@latest

RUN cd /tmp && git clone https://github.com/blechschmidt/massdns --tag v1.1.0 && \
    cd /tmp/v1.1.0 && \
    make && \
    mv /tmp/v1.1.0/bin/massdns /usr/local/bin/massdns

RUN /usr/local/go/bin/go install github.com/d3mondev/puredns/v2@latest

RUN /usr/local/go/bin/go install github.com/lc/gau/v2/cmd/gau@latest

RUN /usr/local/go/bin/go install github.com/tomnomnom/unfurl@latest

## Final stage
FROM golang:1.23-bullseye

WORKDIR /app

RUN apt-get update && apt-get install -y \
    git \
    && rm -rf /var/lib/apt/lists/*

RUN apt-get update && apt-get install -y \
    jq \
    prips \
    nmap \
    wget \
    chromium \
    chromium-sandbox \
    python3 \
    python3-pip \
    python3-venv \
    --no-install-recommends \
    && rm -rf /var/lib/apt/lists/*

ENV CGO_ENABLED=1
ENV GOBIN=/usr/local/bin
    
RUN ARCH=$(dpkg --print-architecture) && \
    if [ "$ARCH" = "arm64" ]; then \
        export GOARCH=arm64 && \
        export CC=aarch64-linux-gnu-gcc; \
    fi

RUN git clone https://github.com/UnaPibaGeek/ctfr.git /opt/ctfr && \
    cd /opt/ctfr && \
    pip install -r requirements.txt

# Copy binaries from builder stage
COPY --from=builder /usr/local/go/bin/* /usr/local/bin/

#COPY --from=builder /root/go/bin/* /usr/local/bin/

COPY --from=builder /root/.pdtm/go/bin/* /usr/local/bin/

COPY --from=builder /usr/local/bin/massdns /usr/local/bin/massdns

# Copy recon worker files
COPY ./docker/worker/* /app/Worker/files/

COPY ./src/h3xrecon/__about__.py /app/

COPY ./dist/h3xrecon-*.whl /app/

RUN python3 -m venv /app/venv && \
    /app/venv/bin/pip install --upgrade pip && \
    /app/venv/bin/pip install /app/h3xrecon-*-py3-none-any.whl

ENV PYTHONUNBUFFERED=1

ENV PYTHONFAULTHANDLER=1

ENTRYPOINT ["/app/venv/bin/h3xrecon-recon"]
