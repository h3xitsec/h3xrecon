- name: Configure Docker Swarm
  block:
    - name: Get Tailscale IP
      ansible.builtin.command: tailscale ip -4
      register: tailscale_ip
      changed_when: false
      when: h3xrecon_swarm_mode == 'tailscale'

    - name: Get Local IP
      ansible.builtin.shell: |
        ip -4 addr show scope global | grep inet | awk '{print $2}' | cut -d/ -f1 | head -1
      register: local_ip
      changed_when: false
      when: h3xrecon_swarm_mode == 'lan'
    
    - ansible.builtin.set_fact:
        node_ip: "{{ tailscale_ip.stdout if h3xrecon_swarm_mode == 'tailscale' else local_ip.stdout }}"
    
    - ansible.builtin.debug:
        var: node_ip

    - name: Initialize Swarm on first host
      community.docker.docker_swarm:
        state: present
        advertise_addr: "{{ node_ip }}"
      when: inventory_hostname == groups['processor'][0]
      register: swarm_init

    - name: Get Swarm join token for workers
      community.docker.docker_swarm_info:
        nodes: yes
      register: swarm_info
      delegate_to: "{{ groups['processor'][0] }}"
      when: inventory_hostname != groups['processor'][0]

    - name: Join Swarm as worker
      community.docker.docker_swarm:
        state: join
        advertise_addr: "{{ node_ip }}"
        join_token: "{{ swarm_info.swarm_facts.JoinTokens.Worker }}"
        remote_addrs: [ "{{ hostvars[groups['processor'][0]]['node_ip'] }}" ]
      when: inventory_hostname != groups['processor'][0]
  
- name: Tag Swarm Nodes
  block:
    - name: Calculate memory limit (70% of total memory)
      ansible.builtin.set_fact:
        worker_memory_limit: "{{ (ansible_memtotal_mb * 0.7)|int }}M"
        worker_memory_reservation: "{{ (ansible_memtotal_mb * 0.1)|int }}M"
    
    - name: Create slice
      ansible.builtin.copy:
        content: |
          [Unit]
          Description=Slice that limits docker resources
          Before=slices.target

          [Slice]
          CPUAccounting=true
          CPUQuota=75%
          MemoryAccounting=true
          MemoryMax={{ worker_memory_limit }}
        dest: /etc/systemd/system/h3xrecon-worker.slice
        owner: root
        group: root
        mode: '0644'
      become: true
    
    - name: Set docker to use the slice
      ansible.builtin.copy:
        content: |
          {
            "cgroup-parent": "limit-docker-memory.slice"
          }
        dest: /etc/docker/daemon.json
        owner: root
        group: root
        mode: '0644'
      become: true
    
    - name: Reload systemd
      ansible.builtin.systemd:
        daemon_reload: true
      become: true
    
    - name: Restart Docker service
      ansible.builtin.systemd:
        name: docker
        state: restarted
        enabled: yes
    
    - name: Tag processor node
      ansible.builtin.shell: docker node update --label-add H3XRECON_SWARM_ROLE=processor {{ groups['processor'][0] }}
      when: 
        - inventory_hostname == groups['processor'][0]
      delegate_to: "{{ groups['processor'][0] }}"

    - name: Tag worker nodes
      ansible.builtin.shell: |
        docker node update --label-add H3XRECON_SWARM_ROLE=worker {{ item }}
      loop: "{{ groups['workers'] }}"
      run_once: true
      when: 
        - inventory_hostname == groups['processor'][0]
      delegate_to: "{{ groups['processor'][0] }}"
    